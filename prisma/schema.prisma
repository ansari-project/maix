// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for volunteer profiles
model User {
  id            String   @id @default(cuid())
  email         String   @unique
  username      String   @unique
  name          String?
  image         String?
  password      String?
  specialty     Specialty?
  experienceLevel ExperienceLevel?
  bio           String?
  linkedinUrl   String?
  githubUrl     String?
  portfolioUrl  String?
  skills        String[] // Array of skill names
  availability  String?  // e.g., "10 hours/week", "weekends only"
  timezone      String?
  isActive      Boolean  @default(true)
  lastDigestSentAt DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  applications  Application[]
  projects      Project[]
  products      Product[]
  messages      Message[]
  personalAccessTokens PersonalAccessToken[]
  posts         Post[]
  comments      Comment[]
  monitors      Monitor[]

  @@index([skills], type: Gin)
  @@map("users")
}

// Project model - simplified to essential fields only
model Project {
  id                    String        @id @default(cuid())
  name                  String        // Project name
  goal                  String        // One-line project goal
  description           String        @db.Text // Project description (longer text)
  contactEmail          String        // Contact email for the project
  helpType              HelpType      // Type of help needed
  status                ProjectStatus @default(AWAITING_VOLUNTEERS) // Project lifecycle status
  targetCompletionDate  DateTime?     // Target date for project completion
  isActive              Boolean       @default(true) // Whether project is actively seeking help
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt

  // Relations
  owner         User          @relation(fields: [ownerId], references: [id])
  ownerId       String
  product       Product?      @relation(fields: [productId], references: [id])
  productId     String?
  applications  Application[]
  
  // Relation for all PROJECT_UPDATE posts (one-to-many)
  updates Post[] @relation("ProjectUpdates")

  // Back-relation to the single discussion post for this project (one-to-one)
  discussionPost Post? @relation("ProjectDiscussionThread")

  @@index([isActive, createdAt])
  @@index([status])
  @@map("projects")
}

// Product model for organizing projects under products
model Product {
  id          String   @id @default(cuid())
  name        String
  description String
  url         String?  // Product website/demo URL
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  owner       User      @relation(fields: [ownerId], references: [id], onDelete: Restrict)
  ownerId     String
  projects    Project[]
  
  // Relation for all PRODUCT_UPDATE posts (one-to-many)
  updates Post[] @relation("ProductUpdates")

  // Back-relation to the single discussion post for this product (one-to-one)
  discussionPost Post? @relation("ProductDiscussionThread")

  @@map("products")
}

// Application model for volunteer applications to projects
model Application {
  id          String            @id @default(cuid())
  message     String
  status      ApplicationStatus @default(PENDING)
  appliedAt   DateTime          @default(now())
  respondedAt DateTime?

  // Relations
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  project   Project @relation(fields: [projectId], references: [id])
  projectId String

  @@unique([userId, projectId])
  @@index([userId])
  @@index([projectId])
  @@map("applications")
}

// Message model for communication between users
model Message {
  id          String   @id @default(cuid())
  content     String
  isRead      Boolean  @default(false)
  sentAt      DateTime @default(now())

  // Relations
  sender      User   @relation(fields: [senderId], references: [id])
  senderId    String
  recipientId String

  @@map("messages")
}

// Enums
enum Specialty {
  AI
  FULL_STACK
  PROGRAM_MANAGER
}

enum ExperienceLevel {
  HOBBYIST
  INTERN
  NEW_GRAD
  SENIOR
}

enum HelpType {
  ADVICE
  PROTOTYPE
  MVP
  FULL_PRODUCT
}

enum ProjectStatus {
  AWAITING_VOLUNTEERS
  PLANNING
  IN_PROGRESS
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
  WITHDRAWN
}

// Post types for structured content
enum PostType {
  QUESTION
  ANSWER
  PROJECT_UPDATE
  PRODUCT_UPDATE
  PROJECT_DISCUSSION
  PRODUCT_DISCUSSION
}


// Personal Access Token model for MCP API authentication
model PersonalAccessToken {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  tokenHash  String   @unique  // CRITICAL: Store hash, not raw token
  name       String   // User-friendly name like "Claude Code on MacBook"
  createdAt  DateTime @default(now())
  lastUsedAt DateTime?
  expiresAt  DateTime?  // Optional expiration
  
  @@index([userId])
  @@map("personal_access_tokens")
}

/// Structured content posts for questions, answers, and updates.
/// Implements the "Discussion Anchor Pattern" where PROJECT_DISCUSSION and PRODUCT_DISCUSSION
/// posts serve as anchors for comments on projects/products.
model Post {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  type    PostType
  content String   @db.Text

  // Author relationship (optional to handle deleted users)
  authorId String?
  author   User?   @relation(fields: [authorId], references: [id], onDelete: SetNull)

  // Optional relationships for specific post types
  // A post can be an update FOR a project
  projectId String?
  project   Project? @relation("ProjectUpdates", fields: [projectId], references: [id], onDelete: Cascade)

  // A post can be the discussion thread FOR a project (holds FK to project)
  projectDiscussionThreadId String? @unique
  projectDiscussionThread   Project? @relation("ProjectDiscussionThread", fields: [projectDiscussionThreadId], references: [id], onDelete: Cascade)

  // A post can be an update FOR a product
  productId String?
  product   Product? @relation("ProductUpdates", fields: [productId], references: [id], onDelete: Cascade)

  // A post can be the discussion thread FOR a product (holds FK to product)
  productDiscussionThreadId String? @unique
  productDiscussionThread   Product? @relation("ProductDiscussionThread", fields: [productDiscussionThreadId], references: [id], onDelete: Cascade)

  // Self-referencing for Questions/Answers
  parentId String?
  parent   Post?   @relation("PostReplies", fields: [parentId], references: [id], onDelete: Restrict)
  replies  Post[]  @relation("PostReplies")

  // Q&A Resolution fields
  isResolved   Boolean @default(false) // For questions - marks if question has been resolved
  bestAnswerId String? @unique         // Reference to the best answer for this question
  bestAnswer   Post?   @relation("BestAnswer", fields: [bestAnswerId], references: [id], onDelete: Restrict)
  
  // Back-relation: this answer is marked as best for which question
  questionForBestAnswer Post? @relation("BestAnswer")

  // Comments relationship
  comments Comment[]

  @@index([authorId])
  @@index([projectId])
  @@index([productId])
  @@index([parentId])
  @@index([projectDiscussionThreadId])
  @@index([productDiscussionThreadId])
  @@index([bestAnswerId])
  @@index([type, createdAt])
  @@map("posts")
}

model Comment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Author relationship (optional to handle deleted users)
  authorId  String?
  author    User?     @relation(fields: [authorId], references: [id], onDelete: SetNull)

  // Post relationship (comments attach to posts only)
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  // Self-referencing for future threading (MVP: flat comments only)
  parentId  String?
  parent    Comment? @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Restrict)
  replies   Comment[] @relation("CommentReplies")

  @@index([postId])
  @@index([authorId])
  @@index([parentId])
  @@map("comments")
}

// ===== CAUSEMON MODELS =====

// Monitor model - tracks what a user wants to monitor
model Monitor {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  
  // What to monitor
  publicFigureId String
  publicFigure   PublicFigure @relation(fields: [publicFigureId], references: [id])
  topicId        String
  topic          Topic @relation(fields: [topicId], references: [id])
  
  // Settings
  isActive       Boolean  @default(true)
  emailFrequency String   @default("daily") // daily, weekly
  lastSearchedAt DateTime? // Track last successful search
  
  // Metadata
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  // Relations
  emailReports   EmailReport[]
  
  @@unique([userId, publicFigureId, topicId])
  @@index([userId])
  @@index([isActive, emailFrequency])
  @@map("monitors")
}

// PublicFigure model - people we can monitor
model PublicFigure {
  id          String   @id @default(cuid())
  name        String
  title       String?  // e.g., "Prime Minister of Australia"
  imageUrl    String?
  
  // Search helpers
  aliases     String[] // ["Albo", "Anthony Albanese", "PM Albanese"]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  monitors    Monitor[]
  events      Event[]
  
  @@index([name])
  @@map("public_figures")
}

// Topic model - causes/issues to track
model Topic {
  id          String   @id @default(cuid())
  name        String   // "Palestine"
  keywords    String[] // ["Gaza", "West Bank", "Palestinian", "Israel"]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  monitors    Monitor[]
  events      Event[]
  
  @@index([name])
  @@map("topics")
}

// Event model - something that happened (e.g., a speech)
model Event {
  id            String   @id @default(cuid())
  
  // What happened
  publicFigureId String
  publicFigure   PublicFigure @relation(fields: [publicFigureId], references: [id])
  topicId        String
  topic          Topic @relation(fields: [topicId], references: [id])
  
  // The event details
  title          String   // "PM speaks at UN about Gaza"
  summary        String   @db.Text // AI-generated summary across all articles
  eventDate      DateTime // When the event happened
  eventType      String   // "speech", "vote", "statement", "interview"
  
  // AI Analysis
  sentiment      String?  // positive, negative, neutral
  stance         String?  // supportive, opposed, neutral
  
  // Deduplication
  deduplicationHash String @unique // Hash of title+date+publicFigureId
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  // Relations
  articles       Article[] // Multiple articles can cover one event
  
  @@index([publicFigureId, topicId, eventDate])
  @@map("events")
}

// Article model - a source covering an event
model Article {
  id            String   @id @default(cuid())
  eventId       String
  event         Event    @relation(fields: [eventId], references: [id])
  
  // Article details
  headline       String
  sourceUrl      String   @unique
  sourceType     String   // "media", "hansard", "committee", "press_release"
  sourcePublisher String  // "The Guardian", "Parliament of Australia"
  publishedAt    DateTime
  
  // Content
  fullText       String?  @db.Text
  keyQuotes      Json?    // Array of important quotes
  
  // For deduplication
  contentHash    String   @unique
  
  createdAt      DateTime @default(now())
  
  @@index([eventId])
  @@index([sourceUrl])
  @@index([contentHash])
  @@map("articles")
}

// EmailReport model - tracks sent emails
model EmailReport {
  id         String   @id @default(cuid())
  monitorId  String
  monitor    Monitor  @relation(fields: [monitorId], references: [id])
  
  // What was included (just tracking IDs, not relations)
  eventIds   String[] // Array of event IDs included
  eventCount Int      // For quick reference
  
  // Status
  sentAt     DateTime @default(now())
  status     String   @default("sent") // sent, failed, pending
  
  @@index([monitorId, sentAt])
  @@map("email_reports")
}